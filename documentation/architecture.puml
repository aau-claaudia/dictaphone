@startuml
title Dictaphone Recording and Transcription Flow
actor User as U
participant "Browser" as BR
box "Web App in UCloud container" #LightBlue
participant "React Frontend" as RF
end box
box "Secure storage in UCloud Container" #LightGreen
participant "Django Server" as DS
participant "Celery Task Manager" as C
end box


U -> BR: Start recording
BR -> U: Request access to mic
U -> BR: Grant access to mic
BR -> RF: Start recording
activate RF
RF -> DS: Start recording
activate DS
DS -> DS: Prepare data transfer
DS -> RF: Ack. [RecID, SessionID]
RF -> RF: Update UI state: recording
loop
    RF -> DS: Send chunk [RecID, SessionID, index]
    DS -> DS: Check chunk index
    DS -> RF: Acknowledge chunk received
    RF -> RF: Delete chunk data on Ack.
    DS --> RF: Request missing chunk (if necessary)
    RF --> DS: Re-send missing chunk (if necessary)
end
U -> BR: Stop recording
BR -> RF: Stop recording
RF -> DS: Stop recording
DS -> RF: Ack. stop recording
RF -> RF: Update UI state: Verifying data
loop
DS -> DS: Check chunk inventory
DS --> RF: Request missing chunk (if necessary)
RF --> DS: Re-send missing chunk (if necessary)
end
DS -> RF: Data size and ETA
RF -> RF: Update UI state: Size and ETA
DS -> C: Create transcription task
activate C
C -> C: Transcribe
C -> DS: Output files
deactivate C
DS -> RF: Output file links

legend bottom
Django Server Implementation requirements:

Recording data management
 - handle data chunks
 - request missing chunks
 - assemble audio file

Monitoring
 - detect broken connection

Transcription service

endlegend


@enduml